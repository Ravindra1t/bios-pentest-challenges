import socket
from cryptography.fernet import Fernet
import hashlib
import hmac


def generate_key():
    return Fernet.generate_key()

def encrypt_message(message, key):
    cipher_suite = Fernet(key)
    cipher_text = cipher_suite.encrypt(message.encode())
    return cipher_text

def decrypt_message(cipher_text, key):
    cipher_suite = Fernet(key)
    plain_text = cipher_suite.decrypt(cipher_text)
    return plain_text.decode()

def generate_hmac(key, message):
    h = hmac.new(key, message, hashlib.sha512)
    return h.digest()

client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect(('localhost', 9999))
while True:
    symmetric_key = generate_key()
    data = client_socket.recv(4096)
    symmetric_key_received = data[:44]
    encrypted_message = data[44:-64]
    received_hmac = data[-64:]
    calculated_hmac = generate_hmac(symmetric_key_received, encrypted_message)
    if calculated_hmac == received_hmac:
        print("HMAC verification successful. ")
        decrypted_message = decrypt_message(encrypted_message, symmetric_key_received)
        print("Decrypted Message:", decrypted_message)
    else:
        print("HMAC verification failed. ")
    message_to_send = input("you:")
    encrypted_message = encrypt_message(message_to_send, symmetric_key)
    hmac_result = generate_hmac(symmetric_key, encrypted_message)
    client_socket.send(symmetric_key + encrypted_message + hmac_result)
client_socket.close()
server_socket.close()

